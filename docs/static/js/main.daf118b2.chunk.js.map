{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","elements","includes","findDuplicate","type","value","onChange","target","onInputValue","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","elem","images","downsized_medium","Error","GifGrid","query","loading","state","setstate","useEffect","then","useFetchGifs","img","GifExpertApp","categories","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MA2CeA,EAxCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBA,OACE,qCACE,8CACA,sBAAMC,SAfW,SAACC,GACpBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,GAC7BR,GAAc,SAACS,GACb,OAPgB,SAACA,GAAD,OAAcA,EAASC,SAASR,GAO3CS,CAAcF,GAGZA,EAFC,CAAEP,GAAR,mBAAuBO,QAS3B,SACE,uBACEG,KAAK,OACLC,MAAOX,EACPY,SAAU,SAACT,GAAD,OA1BG,SAACA,GACpB,IAAQQ,EAAUR,EAAMU,OAAhBF,MACRV,EAAcU,GAwBaG,CAAaX,Y,QCrB7BY,EATK,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAChC,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNJK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACRN,EADQ,0FACiFO,UAC7FF,GAFY,sBAISG,MAAMR,GAJf,cAIRS,EAJQ,gBAKSA,EAASC,OALlB,qBAKNC,EALM,EAKNA,MALM,wBAONC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLhB,GAAIgB,EAAKhB,GACTC,MAAOe,EAAKf,MACZC,IAAKc,EAAKC,OAAOC,iBAAiBhB,QAX1B,kBAcLY,GAdK,cAgBNK,MAAM,+BAhBA,4CAAH,sDCqBEC,EAjBC,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SACjB,ECFmB,SAACc,GACpB,MAA0BtC,mBAAS,CACjC8B,KAAM,GACNS,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRnB,EAAQe,GAAOK,MAAK,SAACZ,GACnBU,EAAS,CACPX,KAAMC,EACNQ,SAAS,SAGZ,CAACD,IAEGE,EDb2BI,CAAapB,GAAjCU,EAAd,EAAQJ,KAAcS,EAAtB,EAAsBA,QAEtB,OACE,qCACE,6BAAKf,IACL,qBAAKJ,UAAU,gDAAf,SACGmB,EACG,cACAL,EAAOF,KAAI,SAACa,GACV,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAI5B,aEO5B6B,EAjBM,WACnB,MAAoC9C,mBAAS,IAA7C,mBAAO+C,EAAP,KAAmBhD,EAAnB,KAEA,OACE,qCACE,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACGgD,EAAWf,KAAI,SAACgB,GAAD,OACd,cAAC,EAAD,CAAuBxB,SAAUwB,GAAnBA,Y,MCTxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.daf118b2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const onInputValue = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const findDuplicate = (elements) => elements.includes(inputValue);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((elements) => {\n        if (!findDuplicate(elements)) {\n          return [inputValue, ...elements];\n        }\n        return elements;\n      });\n    }\n  };\n  return (\n    <>\n      <h2>Add Category</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={(event) => onInputValue(event)}\n        />\n      </form>\n    </>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","import React from \"react\";\n\nconst GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card\">\n      <img src={url} alt={title}></img>\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=Wb4bDyzZzHJ38zNdu8CEExYprXYRsGeU&q=${encodeURI(\n    category\n  )}&limit=10`;\n  const response = await fetch(url);\n  const { data } = await response.json();\n  if (data) {\n    const gifs = data.map((elem) => {\n      return {\n        id: elem.id,\n        title: elem.title,\n        url: elem.images.downsized_medium.url,\n      };\n    });\n    return gifs;\n  } else {\n    throw Error(\"No se encontrÃ³ la imagen\");\n  }\n};\n\nexport { getGifs };\n","import React from \"react\";\nimport GifGridItem from \"./GifGridItem\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      <div className=\"card-grid animate__animated animate__zoomInUp\">\n        {loading\n          ? \"Cargando...\"\n          : images.map((img) => {\n              return <GifGridItem key={img.id} {...img} />;\n            })}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nconst useFetchGifs = (query) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(query).then((gifs) => {\n      setstate({\n        data: gifs,\n        loading: false,\n      });\n    });\n  }, [query]);\n\n  return state;\n};\n\nexport { useFetchGifs };\n","import React, { useState } from \"react\";\nimport AddCategory from \"./AddCategory\";\nimport GifGrid from \"./GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <hr />\n      <AddCategory setCategories={setCategories} />\n      <ol>\n        {categories.map((element) => (\n          <GifGrid key={element} category={element} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./components/GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}